{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\franc\\\\OneDrive\\\\Documents\\\\GitHub\\\\TP5_INF3710\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\franc\\\\OneDrive\\\\Documents\\\\GitHub\\\\TP5_INF3710\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { HttpClient } from \"@angular/common/http\"; // tslint:disable-next-line:ordered-imports\n\nimport { of, Subject } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport { NotificationService } from \"./notifications/notification.service\";\nimport { NotificationContent, NotificationType } from \"./notifications/notification-type\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./notifications/notification.service\";\nexport var CommunicationService = /*#__PURE__*/(function () {\n  var CommunicationService = /*#__PURE__*/function () {\n    function CommunicationService(http, notificationService) {\n      _classCallCheck(this, CommunicationService);\n\n      this.http = http;\n      this.notificationService = notificationService;\n      this.BASE_URL = \"http://localhost:3000/database\";\n      this._listners = new Subject();\n    }\n\n    return _createClass(CommunicationService, [{\n      key: \"listen\",\n      value: function listen() {\n        return this._listners.asObservable();\n      }\n    }, {\n      key: \"filter\",\n      value: function filter(filterBy) {\n        this._listners.next(filterBy);\n      }\n    }, {\n      key: \"getEspeceoiseaus\",\n      value: function getEspeceoiseaus() {\n        return this.http.get(this.BASE_URL + \"/especeoiseaux\").pipe(catchError(this.handleError(\"getEspeceoiseaus\")));\n      }\n    }, {\n      key: \"insertEspeceoiseau\",\n      value: function insertEspeceoiseau(especeoiseau) {\n        return this.http.post(this.BASE_URL + \"/especeoiseaux/insert\", especeoiseau).pipe(catchError(this.handleError(\"insertEspeceoiseau\")));\n      }\n    }, {\n      key: \"updateEspeceoiseau\",\n      value: function updateEspeceoiseau(especeoiseau) {\n        return this.http.put(this.BASE_URL + \"/especeoiseaux/update\", especeoiseau).pipe(catchError(this.handleError(\"updateEspeceoiseau\")));\n      }\n    }, {\n      key: \"deleteEspeceoiseau\",\n      value: function deleteEspeceoiseau(nomscientifique) {\n        return this.http.post(this.BASE_URL + \"/especeoiseaux/delete/\" + nomscientifique, {}).pipe(catchError(this.handleError(\"deleteEspeceoiseau\")));\n      }\n    }, {\n      key: \"getEspeceoiseauPKs\",\n      value: function getEspeceoiseauPKs() {\n        return this.http.get(this.BASE_URL + \"/especeoiseaux/nomscientifique\").pipe(catchError(this.handleError(\"getEspeceoiseauPKs\")));\n      }\n    }, {\n      key: \"handleError\",\n      value: function handleError() {\n        var _this = this;\n\n        var operation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'operation';\n        var result = arguments.length > 1 ? arguments[1] : undefined;\n        console.log(\"allo\");\n        this.notificationService.showBanner(new NotificationContent(\"erreur\", NotificationType.Error, 5000));\n        return function (error) {\n          console.error(error); // log to console instead\n\n          _this.notificationService.showBanner(new NotificationContent(\"erreur\", NotificationType.Error, 5000)); // Extract the error message or error code here, as appropriate\n\n\n          var message = \"Error during \".concat(operation, \": \").concat(error.message);\n\n          if (error.status) {\n            message += \" (Status code: \".concat(error.status, \")\");\n          } // Use the NotificationService to show the error\n\n\n          _this.notificationService.showBanner(new NotificationContent(message, NotificationType.Error, 5000)); // Let the app keep running by returning an empty result.\n\n\n          return of(result);\n        };\n      }\n    }]);\n  }();\n\n  CommunicationService.ɵfac = function CommunicationService_Factory(t) {\n    return new (t || CommunicationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotificationService));\n  };\n\n  CommunicationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommunicationService,\n    factory: CommunicationService.ɵfac\n  });\n  return CommunicationService;\n})();","map":null,"metadata":{},"sourceType":"module"}